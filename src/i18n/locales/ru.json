{
  "assessment": {
    "starting": "Начинаю оценку проекта: {{path}}",
    "completed": "Оценка завершена! Общий балл: {{score}}/100 ({{level}})",
    "framework": "Фреймворк: {{framework}}",
    "outputFormat": "Формат вывода: {{format}}",
    "targetLevel": "Целевой уровень: {{level}}",
    "overallScore": "Общий балл",
    "developerLevel": "Уровень разработчика"
  },
  
  "categories": {
    "codeQuality": "Качество кода",
    "performance": "Производительность",
    "architecture": "Архитектура",
    "bestPractices": "Лучшие практики",
    "maintainability": "Поддерживаемость"
  },
  
  "rules": {
    "namingConventions": "Используйте camelCase для переменных и функций",
    "functionLength": "Найдено {{count}} функций длиннее 50 строк. Рассмотрите декомпозицию.",
    "cyclomaticComplexity": "Цикломатическая сложность {{complexity}} превышает допустимую ({{maxComplexity}})",
    "magicNumbers": "Найдено {{count}} потенциальных магических чисел. Используйте именованные константы.",
    "codeDuplication": "Обнаружено {{count}} дублированных строк. Рассмотрите рефакторинг.",
    "commentsQuality": "Недостаточно комментариев для файла такого размера",
    
    "bundleSize": "Размер файла {{size}}КБ превышает рекомендуемый ({{maxSize}}КБ)",
    "lazyLoading": "Рассмотрите использование ленивой загрузки для оптимизации бандла",
    "heavyOperations": "Найдено {{count}} потенциально тяжелых операций в рендере. Используйте useMemo/computed",
    "memoryLeaks": "Найдено {{count}} потенциальных утечек памяти. Добавьте cleanup функции",
    "unnecessaryRenders": "Компонент со сложными props должен использовать мемоизацию",
    "imageOptimization": "Рассмотрите использование современных форматов изображений (WebP, AVIF)",
    
    "separationOfConcerns": "Компонент содержит слишком много бизнес-логики. Выделите в отдельные сервисы",
    "dependencyInjection": "Используйте внедрение зависимостей вместо прямого создания экземпляров",
    "singleResponsibility": "Файл экспортирует {{count}} сущностей. Рассмотрите разделение на модули",
    "layeredArchitecture": "Компоненты не должны напрямую обращаться к слою данных. Используйте сервисы",
    "designPatterns": "Рассмотрите использование паттерна Singleton для сервисов",
    "moduleCoupling": "Высокая связанность модулей. Рассмотрите рефакторинг архитектуры",
    
    "typescriptUsage": "Рассмотрите миграцию на TypeScript для больших файлов",
    "errorHandling": "Асинхронные операции должны включать обработку ошибок",
    "securityPractices": "Использование innerHTML может привести к XSS",
    "testingCoverage": "Компонент должен иметь тесты",
    "accessibility": "Изображения должны иметь alt атрибут",
    "frameworkConventions": "Не смешивайте классовые компоненты с хуками",
    
    "documentation": "Недостаточно JSDoc комментариев для публичных функций и классов",
    "codeReadability": "{{count}} строк превышают 120 символов. Используйте переносы строк",
    "namingConsistency": "Смешивание camelCase и snake_case. Выберите один стиль",
    "deadCode": "Найдено {{count}} неиспользуемых импортов",
    "configurationManagement": "Найдены захардкоженные URL или пути. Используйте конфигурационные файлы",
    "errorMessages": "Используйте более информативные сообщения об ошибках"
  },
  
  "levels": {
    "junior": {
      "name": "JUNIOR",
      "description": "Начальный уровень разработчика. Необходимо изучение основ и best practices.",
      "criteria": [
        "Знание основ JavaScript/TypeScript",
        "Понимание HTML/CSS",
        "Базовые навыки работы с фреймворком",
        "Простая обработка ошибок",
        "Чистота и читаемость кода"
      ]
    },
    "middle": {
      "name": "MIDDLE",
      "description": "Средний уровень разработчика. Хорошее понимание основ, есть области для улучшения.",
      "criteria": [
        "Продвинутые концепции JavaScript/TypeScript",
        "Тестирование кода",
        "Архитектурные паттерны",
        "Оптимизация производительности",
        "Работа с API и асинхронностью"
      ]
    },
    "senior": {
      "name": "SENIOR",
      "description": "Высокий уровень разработчика. Отличное качество кода и архитектурные решения.",
      "criteria": [
        "Глубокое понимание архитектуры",
        "Принципы SOLID и Clean Code",
        "Безопасность приложений",
        "Ментoring и code review",
        "Техническое лидерство"
      ]
    }
  },
  
  "report": {
    "title": "Отчет об оценке производительности Frontend",
    "categoriesBreakdown": "Разбивка по категориям",
    "topIssues": "Основные критические проблемы",
    "recommendations": "Рекомендации",
    "summary": "Резюме",
    "fileAnalysis": "Анализ файлов",
    "issuesOverview": "Обзор проблем",
    "criticalIssues": "Критические проблемы",
    "warnings": "Предупреждения",
    "noIssuesFound": "Проблемы не найдены! Отличная работа!",
    "detailedAnalysis": "Детальный анализ"
  },
  
  "cli": {
    "commands": {
      "assess": "Провести оценку проекта",
      "init": "Создать конфигурационный файл",
      "rules": "Показать доступные правила",
      "levels": "Показать критерии уровней"
    },
    "messages": {
      "projectNotFound": "Проект не найден: {{path}}",
      "configCreated": "Конфигурационный файл создан: frontend-assessor.config.json",
      "availableRules": "Доступные правила оценки:",
      "levelCriteria": "Критерии уровней разработчиков:",
      "assessmentStarting": "Начинаю оценку проекта...",
      "assessmentCompleted": "Оценка успешно завершена",
      "reportGenerated": "{{format}} отчет создан: {{path}}",
      "error": "Ошибка при выполнении оценки:"
    }
  },
  
  "common": {
    "file": "Файл",
    "rule": "Правило",
    "score": "Балл",
    "issues": "проблем",
    "suggestions": "Предложения",
    "examples": "Примеры",
    "category": "Категория",
    "priority": "Приоритет",
    "high": "Высокий",
    "medium": "Средний",
    "low": "Низкий",
    "error": "ОШИБКА",
    "warning": "ПРЕДУПРЕЖДЕНИЕ",
    "info": "ИНФО",
    "passed": "пройдено",
    "failed": "провалено"
  }
}
