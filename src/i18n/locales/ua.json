{
  "assessment": {
    "starting": "Починаю оцінку проєкту: {{path}}",
    "completed": "Оцінка завершена! Загальний бал: {{score}}/100 ({{level}})",
    "framework": "Фреймворк: {{framework}}",
    "outputFormat": "Формат виводу: {{format}}",
    "targetLevel": "Цільовий рівень: {{level}}",
    "overallScore": "Загальний бал",
    "developerLevel": "Рівень розробника"
  },
  
  "categories": {
    "codeQuality": "Якість коду",
    "performance": "Продуктивність",
    "architecture": "Архітектура",
    "bestPractices": "Найкращі практики",
    "maintainability": "Підтримуваність"
  },
  
  "rules": {
    "namingConventions": "Використовуйте camelCase для змінних та функцій",
    "functionLength": "Знайдено {{count}} функцій довжиною понад 50 рядків. Розгляньте декомпозицію.",
    "cyclomaticComplexity": "Цикломатична складність {{complexity}} перевищує допустиму ({{maxComplexity}})",
    "magicNumbers": "Знайдено {{count}} потенційних магічних чисел. Використовуйте іменовані константи.",
    "codeDuplication": "Виявлено {{count}} дубльованих рядків. Розгляньте рефакторинг.",
    "commentsQuality": "Недостатньо коментарів для файлу такого розміру",
    
    "bundleSize": "Розмір файлу {{size}}КБ перевищує рекомендований ({{maxSize}}КБ)",
    "lazyLoading": "Розгляньте використання ледачого завантаження для оптимізації бандла",
    "heavyOperations": "Знайдено {{count}} потенційно важких операцій у рендері. Використовуйте useMemo/computed",
    "memoryLeaks": "Знайдено {{count}} потенційних витоків пам'яті. Додайте cleanup функції",
    "unnecessaryRenders": "Компонент зі складними props повинен використовувати мемоізацію",
    "imageOptimization": "Розгляньте використання сучасних форматів зображень (WebP, AVIF)",
    
    "separationOfConcerns": "Компонент містить занадто багато бізнес-логіки. Винесіть в окремі сервіси",
    "dependencyInjection": "Використовуйте впровадження залежностей замість прямого створення екземплярів",
    "singleResponsibility": "Файл експортує {{count}} сутностей. Розгляньте розділення на модулі",
    "layeredArchitecture": "Компоненти не повинні напряму звертатися до шару даних. Використовуйте сервіси",
    "designPatterns": "Розгляньте використання паттерну Singleton для сервісів",
    "moduleCoupling": "Висока зв'язаність модулів. Розгляньте рефакторинг архітектури",
    
    "typescriptUsage": "Розгляньте міграцію на TypeScript для великих файлів",
    "errorHandling": "Асинхронні операції повинні включати обробку помилок",
    "securityPractices": "Використання innerHTML може призвести до XSS",
    "testingCoverage": "Компонент повинен мати тести",
    "accessibility": "Зображення повинні мати alt атрибут",
    "frameworkConventions": "Не змішуйте класові компоненти з хуками",
    
    "documentation": "Недостатньо JSDoc коментарів для публічних функцій та класів",
    "codeReadability": "{{count}} рядків перевищують 120 символів. Використовуйте переноси рядків",
    "namingConsistency": "Змішування camelCase та snake_case. Оберіть один стиль",
    "deadCode": "Знайдено {{count}} невикористаних імпортів",
    "configurationManagement": "Знайдені захардкодені URL або шляхи. Використовуйте конфігураційні файли",
    "errorMessages": "Використовуйте більш інформативні повідомлення про помилки"
  },
  
  "levels": {
    "junior": {
      "name": "JUNIOR",
      "description": "Початковий рівень розробника. Необхідне вивчення основ і best practices.",
      "criteria": [
        "Знання основ JavaScript/TypeScript",
        "Розуміння HTML/CSS",
        "Базові навички роботи з фреймворком",
        "Проста обробка помилок",
        "Чистота і читабельність коду"
      ]
    },
    "middle": {
      "name": "MIDDLE",
      "description": "Середній рівень розробника. Хороше розуміння основ, є області для покращення.",
      "criteria": [
        "Просунуті концепції JavaScript/TypeScript",
        "Тестування коду",
        "Архітектурні паттерни",
        "Оптимізація продуктивності",
        "Робота з API та асинхронністю"
      ]
    },
    "senior": {
      "name": "SENIOR",
      "description": "Високий рівень розробника. Відмінна якість коду та архітектурні рішення.",
      "criteria": [
        "Глибоке розуміння архітектури",
        "Принципи SOLID і Clean Code",
        "Безпека додатків",
        "Менторинг і code review",
        "Технічне лідерство"
      ]
    }
  },
  
  "report": {
    "title": "Звіт про оцінку продуктивності Frontend",
    "categoriesBreakdown": "Розбивка за категоріями",
    "topIssues": "Основні критичні проблеми",
    "recommendations": "Рекомендації",
    "summary": "Резюме",
    "fileAnalysis": "Аналіз файлів",
    "issuesOverview": "Огляд проблем",
    "criticalIssues": "Критичні проблеми",
    "warnings": "Попередження",
    "noIssuesFound": "Проблеми не знайдені! Відмінна робота!",
    "detailedAnalysis": "Детальний аналіз"
  },
  
  "cli": {
    "commands": {
      "assess": "Провести оцінку проєкту",
      "init": "Створити конфігураційний файл",
      "rules": "Показати доступні правила",
      "levels": "Показати критерії рівнів"
    },
    "messages": {
      "projectNotFound": "Проєкт не знайдено: {{path}}",
      "configCreated": "Конфігураційний файл створено: frontend-assessor.config.json",
      "availableRules": "Доступні правила оцінки:",
      "levelCriteria": "Критерії рівнів розробників:",
      "assessmentStarting": "Починаю оцінку проєкту...",
      "assessmentCompleted": "Оцінка успішно завершена",
      "reportGenerated": "{{format}} звіт створено: {{path}}",
      "error": "Помилка при виконанні оцінки:"
    }
  },
  
  "common": {
    "file": "Файл",
    "rule": "Правило",
    "score": "Бал",
    "issues": "проблем",
    "suggestions": "Пропозиції",
    "examples": "Приклади",
    "category": "Категорія",
    "priority": "Пріоритет",
    "high": "Високий",
    "medium": "Середній",
    "low": "Низький",
    "error": "ПОМИЛКА",
    "warning": "ПОПЕРЕДЖЕННЯ",
    "info": "ІНФО",
    "passed": "пройдено",
    "failed": "провалено"
  }
}
