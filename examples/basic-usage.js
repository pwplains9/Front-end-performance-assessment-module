const { assessProject } = require('frontend-performance-assessor');

async function runAssessment() {
  try {
    console.log('üîç –ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤–æ–π –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞...\n');
    
    // –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ —Å –≤—ã–≤–æ–¥–æ–º –≤ –∫–æ–Ω—Å–æ–ª—å
    const result = await assessProject({
      projectPath: './src',
      framework: 'auto', // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞
      outputFormat: 'console'
    });

    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ü–µ–Ω–∫–∏:');
    console.log(`–û–±—â–∏–π –±–∞–ª–ª: ${result.overallScore}/100`);
    console.log(`–£—Ä–æ–≤–µ–Ω—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞: ${result.level.toUpperCase()}`);
    console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤: ${result.fileResults.length}`);
    console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: ${result.recommendations.length}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏:', error.message);
  }
}

runAssessment();
