const { 
  FrontendAssessor, 
  HtmlReporter, 
  JsonReporter,
  LevelEvaluator 
} = require('frontend-performance-assessor');

async function advancedAssessment() {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞...\n');

    // –°–æ–∑–¥–∞–Ω–∏–µ assessor —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    const assessor = new FrontendAssessor({
      projectPath: './src',
      framework: 'react',
      includePatterns: [
        '**/*.{js,jsx,ts,tsx}',
        '**/*.vue',
        '!**/*.test.*',
        '!**/*.spec.*'
      ],
      excludePatterns: [
        '**/node_modules/**',
        '**/dist/**',
        '**/build/**',
        '**/coverage/**'
      ]
    });

    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏
    const result = await assessor.assess();

    console.log('üìà –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:');
    Object.entries(result.categories).forEach(([category, data]) => {
      console.log(`  ${category}: ${data.percentage}% (${data.issues.length} –ø—Ä–æ–±–ª–µ–º)`);
    });

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –æ—Ç—á–µ—Ç–∞
    const htmlReporter = new HtmlReporter();
    htmlReporter.generateReport(result, 'detailed-report.html');

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JSON –æ—Ç—á–µ—Ç–∞ –¥–ª—è CI/CD
    const jsonReporter = new JsonReporter();
    jsonReporter.generateReport(result, 'assessment-data.json');

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —É—Ä–æ–≤–Ω—è
    const levelEvaluator = new LevelEvaluator();
    const levelAnalysis = levelEvaluator.getDetailedLevelAnalysis(
      result.overallScore,
      result.categories,
      [] // fileAnalyses - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø–µ—Ä–µ–¥–∞–π—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–æ–≤
    );

    console.log('\nüéØ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —É—Ä–æ–≤–Ω—è:');
    console.log(`–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: ${levelAnalysis.currentLevel.toUpperCase()}`);
    console.log(`–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã: ${levelAnalysis.strengths.join(', ')}`);
    console.log(`–û–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è: ${levelAnalysis.weaknesses.join(', ')}`);
    console.log(`–í—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: ${levelAnalysis.estimatedTimeToNextLevel}`);

    console.log('\nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    levelAnalysis.nextSteps.forEach((step, index) => {
      console.log(`  ${index + 1}. ${step}`);
    });

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º
    const criticalIssues = Object.values(result.categories)
      .flatMap(category => category.issues)
      .filter(issue => issue.severity === 'error');

    if (criticalIssues.length > 0) {
      console.log('\nüö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è:');
      criticalIssues.slice(0, 5).forEach((issue, index) => {
        console.log(`  ${index + 1}. ${issue.message}`);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
    const targetLevel = 'middle';
    if (result.level === targetLevel || 
        (targetLevel === 'junior' && ['middle', 'senior'].includes(result.level)) ||
        (targetLevel === 'middle' && result.level === 'senior')) {
      console.log(`\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è ${targetLevel.toUpperCase()}!`);
    } else {
      console.log(`\nüìà –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º —É—Ä–æ–≤–Ω—è ${targetLevel.toUpperCase()}`);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–∏:', error.message);
    console.error(error.stack);
  }
}

advancedAssessment();
